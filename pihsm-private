#!/usr/bin/python3

# pihsm: Turn your Raspberry Pi into a Hardware Security Module 
# Copyright (C) 2017 System76, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
from os import path

import pihsm
from pihsm.common import ChainStore
from pihsm.sign import Signer, wait_for_entropy_avail
from pihsm.ipc import open_activated_socket, PrivateServer
from pihsm.tests.helpers import random_id


log = pihsm.configure_logging(__name__)

# Wait till at least 3000 bits of entropy are avaliable before generating the
# Ed25519 signing key:
wait_for_entropy_avail(target=3000)


class SpecialClient:
    __slots__ = ('basedir', 'filename')

    def __init__(self, basedir, name='tail'):
        self.basedir = basedir
        self.filename = path.join(basedir, name)

    def make_request(self, request):
        tmp = path.join(self.basedir, random_id())
        with open(tmp, 'xb', 0) as fp:
            os.chmod(fp.fileno(), 0o444)
            fp.write(request)
            os.fsync(fp.fileno())
        os.rename(tmp, self.filename)


display_client = SpecialClient('/run/pihsm-private')
store = ChainStore('/var/lib/pihsm/private')
signer = Signer(store)
display_client.make_request(signer.genesis)

# Open systemd activated AF_UNIX socket, setup IPC server:
sock = open_activated_socket()
server = PrivateServer(sock, display_client, signer)

# Start server:
server.serve_forever()

